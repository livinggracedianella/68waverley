---
import { BaseLayout } from '@rkn/base-components'
import {
  Header,
  markedHelper,
  site,
  fetchFilterPopulate,
  BlockRenderer,
  TwoColumn,
  strapiAsset,
} from '@rkn/page-components'

export async function getStaticPaths() {
  const pages = await fetch(
    `${
      import.meta.env.STRAPI_HOST
    }/api/gatherings?filters[websites][key][$eq]=${import.meta.env.THIS_SITE}`
  ).then((res) => res.json())
  return pages.data.map((page) => ({ params: { page: page.attributes.slug } }))
}
const { page } = Astro.params

const pageData = await fetchFilterPopulate(`/api/gatherings`, page, [
  'header.headerImage',
  'featureImage',
  'blocks',
  'blocks.image',
  'blocks.message',
  'blocks.message.featureImage',
  'blocks.message.featureImage.image',
  'blocks.message.soundcloudRecording',
  'blocks.message.profiles',
  'blocks.post',
  'blocks.post.profiles',
  'blocks.post.featureImage',
])
const gathering = pageData.data[0]?.attributes ?? pageData.data.attributes
const header = gathering.header
const blocks = pageData.data[0]?.attributes?.blocks ?? ''
const imageUrl = `url(${strapiAsset(
  pageData.data[0]?.attributes?.featureImage?.data?.attributes?.formats?.small
    ?.url
)})`
console.log(imageUrl)
---

<BaseLayout title={gathering.title}>
  <div class="outer">
    <Header
      {...header}
      subtitle={`${gathering.timeSlot} | ${gathering.location}`}
    />
    <TwoColumn>
      <div class="containerOuter">
        <div class="containerInner">
          <p>{gathering.oneLiner}</p>
          <section set:html={markedHelper(gathering.shortDescription ?? '')} />
        </div>
      </div>
      <div class="image" slot="second"></div>
    </TwoColumn>
    {blocks && <BlockRenderer blocks={blocks} />}
  </div>
</BaseLayout>
<style define:vars={{ imageUrl }}>
  div.outer {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  div.flex-row {
    display: flex;
    gap: 50px;
    justify-content: center;
  }
  section {
    max-width: 700px;
    padding-bottom: 1rem;
  }
  div.image {
    background-image: var(--imageUrl);
    background-repeat: no-repeat;
    background-size: cover;
    width: auto;
    height: 100%;
    min-height: max(200px, 30vh);
  }
  div.containerOuter {
    padding: 20px 40px;
    display: flex;
    justify-content: center;
  }
  div.containerInner > p {
    color: var(--primary-color);
    font-size: var(--font-size-hero-p);
    font-family: var(--italic);
    max-width: 700px;
  }
</style>
