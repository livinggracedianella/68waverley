---
import { BaseLayout } from '@rkn/base-components'
import {
  Header,
  strapiAsset,
  markedHelper,
  fetchFilterPopulate,
  TwoColumn,
  TwoColumnImageDiv,
  fetchPopulate,
  ProfilesGrid,
  site,
} from '@rkn/page-components'

export async function getStaticPaths() {
  const pages = await fetch(
    `${import.meta.env.STRAPI_HOST}/api/profiles?filters[websites][key][$eq]=${
      import.meta.env.THIS_SITE
    }`
  ).then((res) => res.json())
  return pages.data.map((page) => ({ params: { page: page.attributes.slug } }))
}

const { page } = Astro.params
const pageData = await fetchFilterPopulate(`/api/profiles`, page, [
  'header.headerImage',
  'portrait',
  'websites',
  'anchorageDetails',
  'alternateDetails',
  'alternateDetails.portrait',
  'alternateDetails.websites',
  'services',
])

const provider = pageData.data[0].attributes
const {
  header,
  name,
  slug,
  anchorageDetails = {},
  alternateDetails,
  services,
} = provider
let trueDetails
alternateDetails.forEach((detail) => {
  let match
  detail.websites.data.forEach((website) => {
    if (website.attributes.key == site()) {
      match = true
    }
  })
  if (match) {
    trueDetails = detail
  }
})
const bio = trueDetails?.bio ?? provider.bio
const email = trueDetails?.email ?? provider.email
const title = trueDetails?.title ?? provider?.title ?? ''
const portrait = trueDetails?.portrait?.data
  ? trueDetails.portrait
  : provider.portrait
const { qualifications, memberships, experienceAreas, specialtyAreas } =
  anchorageDetails ? anchorageDetails : ''

const profiles = await fetchPopulate('/api/profiles', ['portrait'])
---

<BaseLayout title={name}>
  <div class="outer">
    <Header
      headerTitle={name}
      subtitle={email &&
        `<a class="cta" href="mailto:${email}
    ">${email}</a
  >`}
    />
    <dl class="banner">
      <dt>Services Offered</dt>
      <dd>
        {
          services.data
            .map((service) => {
              return service.attributes.name
            })
            .join(', ')
        }
      </dd>
    </dl>
    <TwoColumn columnReverse="true">
      <div class="ProfileTextContainer">
        <article set:html={markedHelper(bio ?? '')} />
      </div>
      <div class="sidePanel" slot="second">
        <TwoColumnImageDiv image={portrait} maximumHeight="true" />
      </div>
    </TwoColumn>
    <dl class="detailsGrid">
      <div class="card">
        <dt>Qualifications</dt>
        <dd set:html={markedHelper(qualifications ?? '')} />
      </div>
      <div class="card">
        <dt>Memberships</dt>
        <dd set:html={markedHelper(memberships ?? '')} />
      </div>
      <div class="card">
        <dt>Experiences Areas</dt>
        <dd set:html={markedHelper(experienceAreas ?? '')} />
      </div>
      <div class="card">
        <dt>Specialty Areas</dt>
        <dd set:html={markedHelper(specialtyAreas ?? '')} />
      </div>
    </dl>
    <div
      class="banner cta"
      style=`background-image: url(${strapiAsset('/uploads/anchorage_watercolour_banner_1920w_c5af4e4197.jpg')});`
    >
      <span class="contact">Contact {name.split(' ')[0]}</span>
      <a class="click" href=`mailto:${email}
    `>{email}</a>
    </div>
    <ProfilesGrid
      title="Our People"
      overview="Who else would you like to meet?"
    />
  </div>
</BaseLayout>
<style>
  div.outer {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  div.sidePanel {
    background-color: var(--primary-color);
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  a.cta {
    color: white;
    padding: 10px 0 20px 0;
    display: block;
  }
  div.ProfileTextContainer {
    max-width: 700px;
    margin: 40px auto;
    padding: 0 50px;
  }
  :global(div.ProfileTextContainer :is(p, a)) {
    color: var(--gunmetal);
  }
  :global(div.ProfileTextContainer :is(h3, h4)) {
    color: var(--primary-color);
  }
  :global(div.ProfileTextContainer p:first-of-type:first-line) {
    color: var(--primary-color);
    font-size: var(--font-size-hero-p);
  }
  @media (max-width: 750px) {
    div.imageContainer {
      height: 300px;
    }
  }
  .banner {
    min-height: max(10vh, 80px);
    width: 100%;
    background: var(--light);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    padding: 1rem;
  }

  dl.banner dt {
    padding-right: 2rem;
    font-size: var(--font-size-h4);
    color: var(--primary-color);
    font-family: var(--bold);
    width: fit-content;
    margin: 0.2rem 0;
  }
  dl.banner dd {
    color: var(--gunmetal);
    width: auto;
  }
  div.banner {
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    height: 100%;
    width: auto;
    min-width: 100%;
  }
  span.contact {
    font-size: var(--font-size-h2);
    font-family: var(--bold);
    color: white;
    text-shadow: 2px 2px 3px black;
    padding: 0 1rem;
    margin: 0.2rem 0;
  }
  div.banner a {
    font-size: var(--font-size-h4);
    font-family: var(--bold);
    text-shadow: 1px 1px 2px black;
    letter-spacing: 1px;
    color: white;
    padding: 0 1rem;
    hyphens: auto;
  }
  dl.detailsGrid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    padding: 20px 40px;
    width: 100%;
    background: var(--primary-color);
  }
  .detailsGrid .card {
    background-color: white;
    color: var(--gunmetal);
    padding: 1.5rem 24px;
  }
  .detailsGrid dt {
    font-size: var(--font-size-h3);
    color: var(--primary-color);
    font-family: var(--bold);
  }
  .banner.cta:hover {
    cursor: pointer;
  }
  @media (max-width: 1200px) and (min-width: 1024px), (max-width: 700px) {
    .detailsGrid .card {
      padding: 1rem 16px;
    }
    .detailsGrid dt {
      font-size: var(--font-size-h4);
    }
  }
  @media (max-width: 1024px) {
    dl.detailsGrid {
      grid-template-columns: 1fr 1fr;
    }
  }
  @media (max-width: 550px) {
    dl.detailsGrid {
      grid-template-columns: 1fr;
    }
    div.banner a {
      font-size: var(--font-size-h5);
    }
  }
</style>
<script>
  const banner = document.querySelector('.banner.cta')
  banner.addEventListener('click', (e) => {
    // If the thing they clicked is already a link, do nothing, let their link click go through.
    if (e.target.nodeName === 'A') {
      return
    }
    banner.querySelector('.click')?.click()
  })
</script>
