---
import { BaseLayout } from '@rkn/base-components'
import {
  Header,
  fetchFilterPopulate,
  markedHelper,
  BlockRenderer,
  fetchPopulateSort,
  Grid,
  parseDate,
  GridCard,
} from '@rkn/page-components'

const { pageSlug } = Astro.props

const data = await fetchFilterPopulate('/api/pages', pageSlug, [
  'header.headerImage',
  'blocks.post',
  'blocks.post.profiles',
  'blocks.post.featureImage',
  'blocks.post.featureImage.image',
  'blocks.backgroundColour',
  'blocks.featureImage',
  'blocks.featureImage.image',
  ,
])

const pageData = data.data[0].attributes
const blocks = pageData.blocks
const header = pageData.header

const { data: posts } = await fetchPopulateSort(
  '/api/posts',
  ['featureImage', 'featureImage.image', 'profiles'],
  ['date:desc']
)
---

<BaseLayout title={pageData.title}>
  <div class="outer">
    <Header {...header} />
    <BlockRenderer blocks={blocks} />
    <h2 class="recent-header">Recent Posts</h2>
    <Grid>
      {
        posts.map((post) => {
          const { title, date, slug, body, profiles } = post.attributes
          const postUrl = `/${pageSlug}/${slug}`
          const profileNames = profiles.data
            .map((p) => p.attributes.name)
            .join(',')
          return (
            <GridCard>
              <div class="inner card">
                <h3>
                  <a class="click" href={postUrl}>
                    {title}
                  </a>
                </h3>
                <div class="details">
                  <span class="detail">{parseDate(date)}</span>
                  <span class="detail">{profileNames}</span>
                </div>
                <div
                  class="postCard"
                  set:html={markedHelper(body.substring(0, 100) + '...')}
                />
              </div>
            </GridCard>
          )
        })
      }
    </Grid>
  </div>
</BaseLayout>
<style>
  :root {
    --grid-card-padding: 2.5rem 25px 2rem 25px;
  }
  .recent-header {
    color: var(--primary-color);
    font-size: var(--font-size-h3);
    line-height: var(--line-height-h3);
    margin: 2rem 0;
    text-align: center;
  }
  div.inner {
    background: var(--light);
    padding: var(--grid-card-padding);
    height: 100%;
  }
  div.inner * {
    color: var(--gunmetal);
  }
  .detail:not(:last-of-type)::after {
    content: ' | ';
  }
  div.details {
    margin-top: 0.2rem;
  }
  .detail {
    font-size: var(--font-size-h5);
    font-family: var(--italic);
  }
  div.inner h3 a {
    color: var(--primary-color);
  }
  div.inner p {
    line-height: 140%;
  }
  .card h2 {
    font-size: calc(36rem / 16);
  }
  .card h2,
  .card h3 {
    margin-top: 0;
    line-height: 110%;
  }
  :global(div.postCard *) {
    color: var(--gunmetal);
  }
</style>
