---
//Content comes from Navigation Menu content type in Strapi.
import { fetchPageData } from '../page-components/util.js'
const site = import.meta.env.THIS_SITE
const strapi = import.meta.env.STRAPI_HOST
const navDetails = await fetchPageData(`/api/navigations`, {
  filters: {
    websites: {
      key: {
        $eq: site,
      },
    },
  },
  populate: ['menuItems', 'menuItems.subMenuLinks', 'websites'],
})
const primaryColour =
  `var(--${navDetails.data[0].attributes.websites.data.attributes.primaryColour})` ??
  'var(--gunmetal)'

const menuItems = navDetails.data[0].attributes.menuItems
const logoData = await fetchPageData('/api/navigations', {
  filters: {
    websites: {
      key: {
        $eq: site,
      },
    },
  },
  populate: {
    logo: {
      fields: ['url', 'alter'],
    },
  },
})
const logoURL = `${strapi}${logoData.data[0].attributes.logo.data.attributes.url}`
const logoAltText =
  logoData.data[0].attributes.logo.data.attributes.alternativeText
---

<header class="header-wrapper">
  <a class="skip" href="#content">skip to content</a>
  <div class="container">
    <a class="logoAnchor" href="/">
      <img src={logoURL} alt={logoAltText} />
    </a>
    <nav class="headerNav hidden">
      <ul class="navlist">
        {
          menuItems.map((menuItem) => {
            if (menuItem.subMenuLinks[0]) {
              return (
                <li class="menu-item dropdown">
                  <a class="menu-item" href={menuItem.urlPath}>
                    {menuItem.name.trim()} <span>&gt;</span>
                  </a>
                  <ul class="dropdown">
                    {menuItem.subMenuLinks.map((sml) => {
                      return (
                        <li class="sub-menu-item">
                          <a href={sml.urlPath}>{sml.name.trim()}</a>
                        </li>
                      )
                    })}
                  </ul>
                </li>
              )
            }
            return (
              <li class="menu-item">
                <a class="menu-item clickable" href={menuItem.urlPath}>
                  {menuItem.name.trim()}
                </a>
              </li>
            )
          })
        }
      </ul>
    </nav>
  </div>
  <button type="button" class="headerNavToggle hamburger">
    <div></div>
    <div></div>
    <div></div>
  </button>
</header>
<div id="header-trigger"><a id="content"></a></div>
<style define:vars={{ primaryColour }}>
  /*WRAPPER STYLES*/
  :root {
    --header-height: calc(80rem / 16);
  }
  header {
    height: var(--header-height);
    background-color: var(--primaryColour);
    position: fixed;
    width: 100%;
    transition: 0.25s;
    display: flex;
    z-index: 10;
    box-shadow: 0 5px 5px #00000055;
  }
  .container {
    display: flex;
  }
  @media (min-width: 917px) {
    .container {
      min-width: 750px;
      margin: 0 auto;
      justify-content: center;
    }
  }
  @media (max-width: 916px) {
    .container {
      width: 100%;
    }
  }

  #header-trigger {
    height: var(--header-height);
    transition: 0.25s;
    width: 100%;
  }
  /*SKIP TO CONTENT STYLES*/
  .skip {
    color: white;
    background-color: var(--primaryColour);
    z-index: 20;
    height: 1px;
    width: 1px;
    opacity: 0;
    position: fixed;
  }
  .skip:focus {
    opacity: 1;
    transition: 0.25s;
    height: auto;
    width: auto;
    padding: 6px;
  }
  /*LOGO STYLES*/
  a.anchorLogo {
    height: var(--header-height);
  }
  header img:hover {
    transform: scale(1.05);
  }
  img {
    height: var(--header-height);
    transition: 0.25s;
    padding: 1rem 0;
  }
  @media (max-width: 916px) {
    img {
      height: var(--header-height);
      padding-left: 18px;
    }
  }
  /*NAV STYLES*/
  @media (min-width: 917px) {
    nav {
      margin: 0 auto;
      height: 100%;
    }
  }
  nav * {
    color: white;
    text-transform: uppercase;
    text-decoration: none;
  }
  ul {
    display: flex;
  }
  li {
    list-style: none;
  }
  ul.navlist {
    height: 100%;
  }
  li.menu-item {
    height: 100%;
    display: flex;
  }
  li.menu-item a.menu-item {
    align-self: center;
    width: 100%;
    padding: 0 20px;
  }
  @media (min-width: 917px) {
    li.menu-item:not(:first-of-type)::before {
      content: '|';
      color: white;
      z-index: 1;
      align-self: center;
    }
    a.menu-item:hover,
    a.menu-item:focus {
      transform: scale(1.05);
    }
  }
  span {
    color: white;
    display: inline-block;
    transform: rotate(90deg);
    position: relative;
    left: 7px;
  }
  @media (min-width: 917px) {
    ul.dropdown {
      flex-direction: column;
      display: none;
      position: absolute;
      top: var(--header-height);
      background-color: var(--primaryColour);
    }
  }
  li.dropdown:hover ul.dropdown,
  li.dropdown:focus-within ul.dropdown {
    display: flex;
  }
  li.sub-menu-item {
    width: 100%;
  }
  li.sub-menu-item a {
    display: inline-block;
    height: 100%;
    width: 100%;
    padding: 10px 20px 10px 20px;
  }
  @media (min-width: 917px) {
    li.sub-menu-item a:hover {
      transform: scale(1.05);
    }
  }
  @media (max-width: 916px) {
    .hidden {
      display: none;
    }
    nav {
      position: absolute;
      top: var(--header-height);
      background: var(--primaryColour);
      width: 100%;
      height: calc(100vh - var(--header-height));
      transition: 0.25s;
      overflow-y: scroll;
    }
    nav * {
      flex-shrink: 0;
    }
    nav a:hover,
    nav a:hover span {
      background: var(--light);
      color: var(--gunmetal);
    }
    ul.navlist {
      flex-direction: column;
    }
    li.menu-item {
      flex-direction: column;
      height: fit-content;
      min-width: fit-content;
    }
    li.menu-item:last-of-type {
      padding-bottom: 20px;
    }
    li.menu-item:first-of-type {
      padding-top: 10px;
    }
    li.menu-item a.menu-item {
      padding-top: 10px;
      padding-bottom: 10px;
    }
    ul.dropdown {
      display: flex;
      flex-direction: column;
      position: relative;
    }
    li.sub-menu-item a {
      padding-left: 40px;
    }
    ul.navlist {
      margin: 0 auto;
    }
  }
  /*HAMBURGER AND RESPONSIVE DROPDOWN STYLES*/
  /*remove button default styling*/
  header button {
    display: inline-block;
    border: none;
    text-decoration: none;
    cursor: pointer;
    text-align: center;
    background-color: var(--primaryColour);
  }
  header .headerNavToggle {
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: var(--primaryColour);
    border: 0px;
    transition: 0.25s;
    cursor: pointer;
    font-size: 9px;
    align-self: center;
    margin-right: max(10px, 1vw);
    width: auto;
    padding: 10px;
    min-height: 5em;
  }

  .headerNavToggle:focus-within {
    outline: 1px solid white;
  }

  .headerNavToggle:hover {
    transform: scale(1.05);
  }

  .headerNavToggle div {
    background-color: #fff;
    height: 0.4em;
    transition: 0.4s;
    flex-shrink: 0;
    flex-grow: 0;
  }

  .headerNavToggle.hamburger div {
    width: 3.5em;
    margin: 0.3em 0.1em 0.3em 0;
    border-radius: 10px;
  }
  .toggled div:nth-of-type(1) {
    border-radius: 10px;
    transform: rotate(45deg);
    margin: 0;
    position: relative;
    top: 4px;
  }

  .toggled div:nth-of-type(2) {
    border-radius: 10px;
    margin: 0;
    transform: rotate(405deg);
    opacity: 0;
  }

  .toggled div:nth-of-type(3) {
    border-radius: 10px;
    transform: rotate(-45deg);
    margin: 0;
    position: relative;
    bottom: 4px;
  }
  @media (max-width: 916px) {
    header .headerNavToggle {
      display: flex;
      margin-left: auto;
    }
  }
</style>
<script>
  const html = document.documentElement
  const headerTrigger = document.querySelector('#header-trigger')
  const headerHeightInit = html.style.getPropertyValue('--header-height')
  const headerWrapper = document.querySelector('.header-wrapper')
  let options = {
    root: null,
    rootMargin: '0px',
    threshold: 1,
  }
  const obsCallback = (entries) => {
    entries.forEach((entry) => {
      if (!entry.isIntersecting) {
        html.style.setProperty('--header-height', 'calc(60rem / 16)')
        headerWrapper.classList.add('scrolled')
      } else {
        html.style.setProperty('--header-height', headerHeightInit)
        headerWrapper.classList.remove('scrolled')
      }
    })
  }

  let headerObserver = new IntersectionObserver(obsCallback, options)
  headerObserver.observe(headerTrigger)
</script>
<script>
  const headerNavToggle = document.querySelector('.headerNavToggle')
  const headerNav = document.querySelector('.headerNav')
  const headerWrapper = document.querySelector('.header-wrapper')
  headerNavToggle.addEventListener('click', (event) => {
    headerNav.classList.toggle('hidden')
    event.currentTarget.classList.toggle('toggled')
    if (headerNav.classList.contains('hidden')) {
      headerWrapper.classList.remove('opacity')
    } else {
      headerWrapper.classList.add('opacity')
    }
  })
</script>
